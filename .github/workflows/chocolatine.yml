name: Chocolatine Integration and Testing

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "https://github.com/EpitechPromo2028/B-DOP-200-BDX-2-1-chocolatine-simon.maigrot"
  EXECUTABLES: "executable"

jobs:
  check_coding_style:
    name: Check Coding Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Run Coding Style Checker
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace ghcr.io/epitech/coding-style-checker:latest check.sh $(pwd) $(pwd)

  check_program_compilation:
    name: Check Program Compilation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    needs: check_coding_style
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          repository: ''

      - name: Compile with Make
        run: make

      - name: Clean Repository
        run: make fclean

      - name: Verify Executables
        run: |
          for file in ${{ vars.EXECUTABLES }};do
            if [ ! -x "$file" ]; then
              echo "File $file does not exist or is not executable"
              exit 1
            fi
          done

  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    needs: check_program_compilation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          repository: ''

      - name: Run Tests
        run: make tests_run

  push_to_mirror:
    name: Push to Mirror Repository
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Push to Mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SECRET }}
